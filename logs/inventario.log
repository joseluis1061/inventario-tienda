2025-07-13 10:40:57 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Starting InventarioTiendaApplication using Java 21.0.7 with PID 14020 (D:\DesarrolloSoftware\Java\inventario-tienda\build\classes\java\main started by josel in D:\DesarrolloSoftware\Java\inventario-tienda)
2025-07-13 10:40:57 [restartedMain] DEBUG c.j.i.InventarioTiendaApplication - Running with Spring Boot v3.5.2, Spring v6.2.8
2025-07-13 10:40:57 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - The following 1 profile is active: "dev"
2025-07-13 10:40:57 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 10:40:57 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 10:41:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 10:41:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 120 ms. Found 5 JPA repository interfaces.
2025-07-13 10:41:08 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 10:41:08 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 10:41:08 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 10:41:08 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 10:41:08 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 11375 ms
2025-07-13 10:41:09 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 10:41:09 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-13 10:41:09 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 10:41:11 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 10:41:11 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 10:41:12 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@58d2991
2025-07-13 10:41:12 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 10:41:12 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-13 10:41:12 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-13 10:41:12 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-13 10:41:14 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 10:41:14 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 10:41:15 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 10:41:18 [restartedMain] INFO  c.jlzDev.inventario.security.JwtUtil - JwtUtil inicializado - Expiraci√≥n: 24h, Refresh: 30d, Clave: 856bits
2025-07-13 10:41:18 [restartedMain] DEBUG c.j.i.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-13 10:41:19 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-13 10:41:20 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-07-13 10:41:20 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-07-13 10:41:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 10:41:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 10:41:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 10:41:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 10:41:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 10:41:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 10:41:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 10:41:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 10:41:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 10:41:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 10:41:21 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-13 10:41:22 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 10:41:22 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 10:41:22 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Started InventarioTiendaApplication in 27.4 seconds (process running for 28.718)
2025-07-13 10:50:46 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 10:50:46 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 10:50:46 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-07-13 10:50:46 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/categorias
2025-07-13 10:50:46 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 10:50:46 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 10:50:46 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 10:50:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 10:50:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 10:50:46 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 10:50:46 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 10:50:46 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/categorias
2025-07-13 10:50:46 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-07-13 10:50:46 [http-nio-8080-exec-2] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Solicitando todas las categor√≠as
2025-07-13 10:50:46 [http-nio-8080-exec-2] DEBUG c.j.i.service.CategoriaService - Obteniendo todas las categor√≠as
2025-07-13 10:50:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0
2025-07-13 10:50:46 [http-nio-8080-exec-2] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Encontradas 6 categor√≠as
2025-07-13 11:20:32 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 11:20:32 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 11:20:32 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 11:20:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 11:20:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 11:20:32 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 11:20:32 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 11:20:32 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 11:20:32 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 11:20:32 [http-nio-8080-exec-5] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 11:20:32 [http-nio-8080-exec-5] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 11:20:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 11:20:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 11:20:32 [http-nio-8080-exec-5] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 2 productos
2025-07-13 11:21:42 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Starting InventarioTiendaApplication using Java 21.0.7 with PID 9952 (D:\DesarrolloSoftware\Java\inventario-tienda\build\classes\java\main started by josel in D:\DesarrolloSoftware\Java\inventario-tienda)
2025-07-13 11:21:42 [restartedMain] DEBUG c.j.i.InventarioTiendaApplication - Running with Spring Boot v3.5.2, Spring v6.2.8
2025-07-13 11:21:42 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - The following 1 profile is active: "dev"
2025-07-13 11:21:42 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 11:21:42 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 11:21:43 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 11:21:43 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 46 ms. Found 5 JPA repository interfaces.
2025-07-13 11:21:44 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 11:21:44 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 11:21:44 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 11:21:44 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 11:21:44 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2477 ms
2025-07-13 11:21:45 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 11:21:45 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-13 11:21:45 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 11:21:45 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 11:21:45 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 11:21:45 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4b135a94
2025-07-13 11:21:45 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 11:21:45 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-13 11:21:45 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-13 11:21:45 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-13 11:21:46 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 11:21:46 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table productos 
       add column imagen TEXT
2025-07-13 11:21:46 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 11:21:47 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 11:21:48 [restartedMain] INFO  c.jlzDev.inventario.security.JwtUtil - JwtUtil inicializado - Expiraci√≥n: 24h, Refresh: 30d, Clave: 856bits
2025-07-13 11:21:48 [restartedMain] DEBUG c.j.i.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-13 11:21:49 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-13 11:21:49 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-07-13 11:21:49 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-07-13 11:21:49 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 11:21:49 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 11:21:49 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 11:21:49 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 11:21:49 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 11:21:49 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 11:21:49 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 11:21:49 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 11:21:49 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 11:21:49 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 11:21:49 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-13 11:21:49 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 11:21:49 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 11:21:49 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Started InventarioTiendaApplication in 8.177 seconds (process running for 8.715)
2025-07-13 11:22:20 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 11:22:20 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 11:22:20 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 11:22:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 11:22:20 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 11:22:20 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 11:22:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 11:22:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 11:22:21 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 11:22:21 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 11:22:21 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 11:22:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 11:22:21 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 11:22:21 [http-nio-8080-exec-1] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 11:22:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 11:22:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 11:22:21 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 2 productos
2025-07-13 11:24:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/1
2025-07-13 11:24:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/1
2025-07-13 11:24:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 11:24:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 11:24:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 11:24:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 11:24:36 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 11:24:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/1
2025-07-13 11:24:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/1
2025-07-13 11:24:36 [http-nio-8080-exec-4] INFO  c.j.i.controller.ProductoController - GET /api/productos/1 - Solicitando producto por ID
2025-07-13 11:24:36 [http-nio-8080-exec-4] DEBUG c.j.i.service.ProductoService - Obteniendo producto por ID: 1
2025-07-13 11:24:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id=p1_0.categoria_id 
    where
        p1_0.id=?
2025-07-13 11:24:36 [http-nio-8080-exec-4] INFO  c.j.i.controller.ProductoController - GET /api/productos/1 - Producto encontrado: iPhone 15 Pro Max
2025-07-13 12:25:59 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/categorias
2025-07-13 12:25:59 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 12:25:59 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 12:25:59 [http-nio-8080-exec-8] WARN  c.jlzDev.inventario.security.JwtUtil - Error al extraer claims del token: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:25:59Z, a difference of 3336522 milliseconds.  Allowed clock skew: 0 milliseconds.
2025-07-13 12:25:59 [http-nio-8080-exec-8] ERROR c.j.i.s.JwtAuthenticationFilter - Error inesperado en filtro JWT para request /api/categorias: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:25:59Z, a difference of 3336522 milliseconds.  Allowed clock skew: 0 milliseconds.
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:25:59Z, a difference of 3336522 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at com.jlzDev.inventario.security.JwtUtil.extractAllClaims(JwtUtil.java:220)
	at com.jlzDev.inventario.security.JwtUtil.extractClaim(JwtUtil.java:209)
	at com.jlzDev.inventario.security.JwtUtil.extractUsername(JwtUtil.java:158)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 12:26:20 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 12:26:20 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 12:26:20 [http-nio-8080-exec-9] WARN  c.jlzDev.inventario.security.JwtUtil - Error al extraer claims del token: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:26:20Z, a difference of 3357437 milliseconds.  Allowed clock skew: 0 milliseconds.
2025-07-13 12:26:20 [http-nio-8080-exec-9] ERROR c.j.i.s.JwtAuthenticationFilter - Error inesperado en filtro JWT para request /api/categorias: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:26:20Z, a difference of 3357437 milliseconds.  Allowed clock skew: 0 milliseconds.
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:26:20Z, a difference of 3357437 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at com.jlzDev.inventario.security.JwtUtil.extractAllClaims(JwtUtil.java:220)
	at com.jlzDev.inventario.security.JwtUtil.extractClaim(JwtUtil.java:209)
	at com.jlzDev.inventario.security.JwtUtil.extractUsername(JwtUtil.java:158)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 12:26:34 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Starting InventarioTiendaApplication using Java 21.0.7 with PID 21320 (D:\DesarrolloSoftware\Java\inventario-tienda\build\classes\java\main started by josel in D:\DesarrolloSoftware\Java\inventario-tienda)
2025-07-13 12:26:34 [restartedMain] DEBUG c.j.i.InventarioTiendaApplication - Running with Spring Boot v3.5.2, Spring v6.2.8
2025-07-13 12:26:34 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - The following 1 profile is active: "dev"
2025-07-13 12:26:34 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 12:26:34 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 12:26:35 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 12:26:35 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 53 ms. Found 5 JPA repository interfaces.
2025-07-13 12:26:36 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 12:26:36 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 12:26:36 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 12:26:36 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 12:26:36 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2131 ms
2025-07-13 12:26:36 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 12:26:36 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-13 12:26:36 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 12:26:37 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 12:26:37 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 12:26:37 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1ab7829c
2025-07-13 12:26:37 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 12:26:37 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-13 12:26:37 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-13 12:26:37 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-13 12:26:38 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 12:26:38 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 12:26:38 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 12:26:39 [restartedMain] INFO  c.jlzDev.inventario.security.JwtUtil - JwtUtil inicializado - Expiraci√≥n: 24h, Refresh: 30d, Clave: 856bits
2025-07-13 12:26:39 [restartedMain] DEBUG c.j.i.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-13 12:26:40 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-13 12:26:40 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-07-13 12:26:40 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-07-13 12:26:40 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 12:26:40 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 12:26:40 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 12:26:40 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 12:26:40 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 12:26:40 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 12:26:40 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 12:26:40 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 12:26:40 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 12:26:40 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 12:26:40 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-13 12:26:41 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 12:26:41 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 12:26:41 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Started InventarioTiendaApplication in 7.276 seconds (process running for 7.74)
2025-07-13 12:26:56 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 12:26:56 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 12:26:56 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 12:26:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 12:26:56 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 12:26:57 [http-nio-8080-exec-1] WARN  c.jlzDev.inventario.security.JwtUtil - Error al extraer claims del token: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:26:57Z, a difference of 3394119 milliseconds.  Allowed clock skew: 0 milliseconds.
2025-07-13 12:26:57 [http-nio-8080-exec-1] ERROR c.j.i.s.JwtAuthenticationFilter - Error inesperado en filtro JWT para request /api/categorias: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:26:57Z, a difference of 3394119 milliseconds.  Allowed clock skew: 0 milliseconds.
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:26:57Z, a difference of 3394119 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at com.jlzDev.inventario.security.JwtUtil.extractAllClaims(JwtUtil.java:220)
	at com.jlzDev.inventario.security.JwtUtil.extractClaim(JwtUtil.java:209)
	at com.jlzDev.inventario.security.JwtUtil.extractUsername(JwtUtil.java:158)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 12:27:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/logout
2025-07-13 12:27:15 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/logout
2025-07-13 12:27:15 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: POST /api/auth/logout
2025-07-13 12:27:15 [http-nio-8080-exec-3] WARN  c.jlzDev.inventario.security.JwtUtil - Error al extraer claims del token: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:27:15Z, a difference of 3412465 milliseconds.  Allowed clock skew: 0 milliseconds.
2025-07-13 12:27:15 [http-nio-8080-exec-3] ERROR c.j.i.s.JwtAuthenticationFilter - Error inesperado en filtro JWT para request /api/auth/logout: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:27:15Z, a difference of 3412465 milliseconds.  Allowed clock skew: 0 milliseconds.
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-07-13T16:30:23Z. Current time: 2025-07-13T17:27:15Z, a difference of 3412465 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at com.jlzDev.inventario.security.JwtUtil.extractAllClaims(JwtUtil.java:220)
	at com.jlzDev.inventario.security.JwtUtil.extractClaim(JwtUtil.java:209)
	at com.jlzDev.inventario.security.JwtUtil.extractUsername(JwtUtil.java:158)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 12:27:37 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/auth/login
2025-07-13 12:27:37 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-07-13 12:27:37 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: POST /api/auth/login
2025-07-13 12:27:37 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Endpoint p√∫blico detectado: /api/auth/login. Saltando validaci√≥n JWT
2025-07-13 12:27:37 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-13 12:27:37 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-07-13 12:27:37 [http-nio-8080-exec-5] INFO  c.j.i.controller.AuthController - POST /api/auth/login - Intento de login: username=admin, deviceInfo=Web - Win32 - es-419 - Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWeb, rememberMe=false
2025-07-13 12:27:37 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Intentando cargar usuario por username o email: admin
2025-07-13 12:27:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        (
            u1_0.username=? 
            or u1_0.email=?
        ) 
        and u1_0.activo=1
2025-07-13 12:27:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 12:27:37 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 12:27:37 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente por username/email: admin (username real: admin) con rol: ADMIN
2025-07-13 12:27:37 [http-nio-8080-exec-5] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: admin
2025-07-13 12:27:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 12:27:38 [http-nio-8080-exec-5] DEBUG c.jlzDev.inventario.security.JwtUtil - Generando access token para usuario: admin
2025-07-13 12:27:38 [http-nio-8080-exec-5] INFO  c.jlzDev.inventario.security.JwtUtil - Access token generado exitosamente para usuario: admin
2025-07-13 12:27:38 [http-nio-8080-exec-5] DEBUG c.jlzDev.inventario.security.JwtUtil - Generando refresh token para usuario: admin
2025-07-13 12:27:38 [http-nio-8080-exec-5] INFO  c.jlzDev.inventario.security.JwtUtil - Refresh token generado exitosamente para usuario: admin
2025-07-13 12:27:38 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 12:27:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 12:27:38 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 12:27:38 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 12:27:38 [http-nio-8080-exec-5] INFO  c.j.i.controller.AuthController - Login exitoso para usuario: admin con sessionId: admin_1752427658313_56edb4ec
2025-07-13 12:27:46 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 12:27:46 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 12:27:46 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 12:27:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 12:27:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 12:27:46 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 12:27:46 [http-nio-8080-exec-6] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 12:27:46 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/categorias
2025-07-13 12:27:46 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-07-13 12:27:46 [http-nio-8080-exec-6] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Solicitando todas las categor√≠as
2025-07-13 12:27:46 [http-nio-8080-exec-6] DEBUG c.j.i.service.CategoriaService - Obteniendo todas las categor√≠as
2025-07-13 12:27:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0
2025-07-13 12:27:46 [http-nio-8080-exec-6] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Encontradas 6 categor√≠as
2025-07-13 12:33:06 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 12:33:06 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 12:33:06 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 12:33:06 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 12:33:06 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 12:33:06 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 12:33:06 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 12:33:06 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/categorias
2025-07-13 12:33:06 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-07-13 12:33:06 [http-nio-8080-exec-8] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Solicitando todas las categor√≠as
2025-07-13 12:33:06 [http-nio-8080-exec-8] DEBUG c.j.i.service.CategoriaService - Obteniendo todas las categor√≠as
2025-07-13 12:33:06 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0
2025-07-13 12:33:07 [http-nio-8080-exec-8] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Encontradas 6 categor√≠as
2025-07-13 12:33:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 12:33:14 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 12:33:14 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 12:33:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 12:33:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 12:33:14 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 12:33:14 [http-nio-8080-exec-9] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 12:33:14 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/categorias
2025-07-13 12:33:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-07-13 12:33:14 [http-nio-8080-exec-9] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Solicitando todas las categor√≠as
2025-07-13 12:33:14 [http-nio-8080-exec-9] DEBUG c.j.i.service.CategoriaService - Obteniendo todas las categor√≠as
2025-07-13 12:33:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0
2025-07-13 12:33:14 [http-nio-8080-exec-9] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Encontradas 6 categor√≠as
2025-07-13 12:33:32 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/categorias/3
2025-07-13 12:33:33 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias/3
2025-07-13 12:33:33 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias/3
2025-07-13 12:33:33 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 12:33:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 12:33:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 12:33:33 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 12:33:33 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 12:33:33 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/categorias/3
2025-07-13 12:33:33 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias/3
2025-07-13 12:33:33 [http-nio-8080-exec-1] INFO  c.j.i.controller.CategoriaController - GET /api/categorias/3 - Solicitando categor√≠a por ID
2025-07-13 12:33:33 [http-nio-8080-exec-1] DEBUG c.j.i.service.CategoriaService - Obteniendo categor√≠a por ID: 3
2025-07-13 12:33:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 12:33:33 [http-nio-8080-exec-1] INFO  c.j.i.controller.CategoriaController - GET /api/categorias/3 - Categor√≠a encontrada: Hogar
2025-07-13 12:39:45 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 12:39:45 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 12:39:45 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 12:39:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 12:39:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 12:39:45 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 12:39:45 [http-nio-8080-exec-3] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 12:39:45 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/categorias
2025-07-13 12:39:45 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-07-13 12:39:45 [http-nio-8080-exec-3] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Solicitando todas las categor√≠as
2025-07-13 12:39:45 [http-nio-8080-exec-3] DEBUG c.j.i.service.CategoriaService - Obteniendo todas las categor√≠as
2025-07-13 12:39:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0
2025-07-13 12:39:45 [http-nio-8080-exec-3] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Encontradas 6 categor√≠as
2025-07-13 12:48:10 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos
2025-07-13 12:48:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 12:48:10 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 12:48:10 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 12:48:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 12:48:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 12:48:10 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 12:48:10 [http-nio-8080-exec-6] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 12:48:10 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 12:48:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 12:48:10 [http-nio-8080-exec-6] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 12:48:10 [http-nio-8080-exec-6] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 12:48:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 12:48:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 12:48:10 [http-nio-8080-exec-6] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 2 productos
2025-07-13 13:06:54 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 13:06:54 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 13:06:55 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:06:55 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:06:55 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:06:55 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:06:55 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:06:55 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 13:06:55 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 13:06:55 [http-nio-8080-exec-8] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 13:06:55 [http-nio-8080-exec-8] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 13:06:55 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 13:06:55 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 13:06:55 [http-nio-8080-exec-8] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 2 productos
2025-07-13 13:14:04 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 13:14:04 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 13:14:04 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:14:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:14:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:14:04 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:14:04 [http-nio-8080-exec-10] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:14:04 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/categorias
2025-07-13 13:14:04 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-07-13 13:14:04 [http-nio-8080-exec-10] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Solicitando todas las categor√≠as
2025-07-13 13:14:04 [http-nio-8080-exec-10] DEBUG c.j.i.service.CategoriaService - Obteniendo todas las categor√≠as
2025-07-13 13:14:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0
2025-07-13 13:14:04 [http-nio-8080-exec-10] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Encontradas 6 categor√≠as
2025-07-13 13:14:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 13:14:09 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 13:14:09 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:14:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:14:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:14:09 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:14:09 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:14:09 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 13:14:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 13:14:09 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 13:14:09 [http-nio-8080-exec-1] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 13:14:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 13:14:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 13:14:09 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 2 productos
2025-07-13 13:14:50 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Starting InventarioTiendaApplication using Java 21.0.7 with PID 26284 (D:\DesarrolloSoftware\Java\inventario-tienda\build\classes\java\main started by josel in D:\DesarrolloSoftware\Java\inventario-tienda)
2025-07-13 13:14:50 [restartedMain] DEBUG c.j.i.InventarioTiendaApplication - Running with Spring Boot v3.5.2, Spring v6.2.8
2025-07-13 13:14:50 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - The following 1 profile is active: "dev"
2025-07-13 13:14:51 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 13:14:51 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 13:14:52 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:14:52 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 79 ms. Found 5 JPA repository interfaces.
2025-07-13 13:14:55 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:14:55 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:14:55 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:14:55 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:14:55 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 4236 ms
2025-07-13 13:14:55 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:14:55 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-13 13:14:55 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:14:56 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:14:56 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 13:14:56 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@31a08894
2025-07-13 13:14:56 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 13:14:56 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-13 13:14:56 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-13 13:14:56 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-13 13:14:57 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:14:57 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:14:58 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 13:14:59 [restartedMain] INFO  c.jlzDev.inventario.security.JwtUtil - JwtUtil inicializado - Expiraci√≥n: 24h, Refresh: 30d, Clave: 856bits
2025-07-13 13:14:59 [restartedMain] DEBUG c.j.i.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-13 13:15:00 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-13 13:15:00 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-07-13 13:15:00 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-07-13 13:15:00 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:00 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:00 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:00 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:00 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:00 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:00 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:00 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:00 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:00 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:00 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-13 13:15:01 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:15:01 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:15:01 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Started InventarioTiendaApplication in 11.281 seconds (process running for 11.959)
2025-07-13 13:15:18 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Starting InventarioTiendaApplication using Java 21.0.7 with PID 24648 (D:\DesarrolloSoftware\Java\inventario-tienda\build\classes\java\main started by josel in D:\DesarrolloSoftware\Java\inventario-tienda)
2025-07-13 13:15:18 [restartedMain] DEBUG c.j.i.InventarioTiendaApplication - Running with Spring Boot v3.5.2, Spring v6.2.8
2025-07-13 13:15:18 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - The following 1 profile is active: "dev"
2025-07-13 13:15:18 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 13:15:18 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 13:15:19 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:15:19 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 71 ms. Found 5 JPA repository interfaces.
2025-07-13 13:15:20 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:15:20 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:15:20 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:15:20 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:15:20 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2521 ms
2025-07-13 13:15:21 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:15:21 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-13 13:15:21 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:15:21 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:15:21 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 13:15:21 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@31a7be8
2025-07-13 13:15:21 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 13:15:21 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-13 13:15:21 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-13 13:15:21 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-13 13:15:22 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:15:23 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:15:23 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 13:15:24 [restartedMain] INFO  c.jlzDev.inventario.security.JwtUtil - JwtUtil inicializado - Expiraci√≥n: 24h, Refresh: 30d, Clave: 856bits
2025-07-13 13:15:24 [restartedMain] DEBUG c.j.i.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-13 13:15:25 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-13 13:15:25 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-07-13 13:15:25 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-07-13 13:15:25 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:25 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:25 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:25 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:25 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:25 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:25 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:25 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:25 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:25 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:15:25 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-13 13:15:26 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:15:26 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:15:26 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Started InventarioTiendaApplication in 8.593 seconds (process running for 9.073)
2025-07-13 13:16:28 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 13:16:28 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 13:16:28 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 13:16:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 13:16:28 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 13:16:28 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:16:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:16:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:16:29 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:16:29 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:16:29 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 13:16:29 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 13:16:31 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 13:16:31 [http-nio-8080-exec-1] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 13:16:31 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 13:16:31 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 13:16:31 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 2 productos
2025-07-13 13:18:14 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Starting InventarioTiendaApplication using Java 21.0.7 with PID 21192 (D:\DesarrolloSoftware\Java\inventario-tienda\build\classes\java\main started by josel in D:\DesarrolloSoftware\Java\inventario-tienda)
2025-07-13 13:18:14 [restartedMain] DEBUG c.j.i.InventarioTiendaApplication - Running with Spring Boot v3.5.2, Spring v6.2.8
2025-07-13 13:18:14 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - The following 1 profile is active: "dev"
2025-07-13 13:18:14 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 13:18:14 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 13:18:15 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:18:15 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 57 ms. Found 5 JPA repository interfaces.
2025-07-13 13:18:17 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:18:17 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:18:17 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:18:17 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:18:17 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2838 ms
2025-07-13 13:18:17 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:18:17 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-13 13:18:17 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:18:17 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:18:17 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 13:18:17 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@54964230
2025-07-13 13:18:17 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 13:18:18 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-13 13:18:18 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-13 13:18:18 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-13 13:18:18 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:18:19 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:18:19 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 13:18:20 [restartedMain] INFO  c.jlzDev.inventario.security.JwtUtil - JwtUtil inicializado - Expiraci√≥n: 24h, Refresh: 30d, Clave: 856bits
2025-07-13 13:18:20 [restartedMain] DEBUG c.j.i.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-13 13:18:21 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-13 13:18:21 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-07-13 13:18:21 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-07-13 13:18:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:18:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:18:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:18:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:18:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:18:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:18:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:18:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:18:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:18:21 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:18:21 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-13 13:18:22 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:18:22 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:18:22 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Started InventarioTiendaApplication in 8.507 seconds (process running for 8.972)
2025-07-13 13:19:10 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 13:19:10 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 13:19:10 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 6 ms
2025-07-13 13:19:10 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 13:19:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 13:19:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:19:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:19:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:19:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:19:11 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:19:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 13:19:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 13:19:11 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 13:19:11 [http-nio-8080-exec-1] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 13:19:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 13:19:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 13:19:11 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 2 productos
2025-07-13 13:25:14 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 13:25:14 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 13:25:14 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:25:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:25:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:25:14 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:25:14 [http-nio-8080-exec-3] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:25:14 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 13:25:14 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 13:25:14 [http-nio-8080-exec-3] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 13:25:14 [http-nio-8080-exec-3] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 13:25:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 13:25:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 13:25:14 [http-nio-8080-exec-3] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 2 productos
2025-07-13 13:25:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 13:25:32 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 13:25:33 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:25:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:25:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:25:33 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:25:33 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:25:33 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 13:25:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 13:25:33 [http-nio-8080-exec-4] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 13:25:33 [http-nio-8080-exec-4] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 13:25:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 13:25:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 13:25:33 [http-nio-8080-exec-4] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 2 productos
2025-07-13 13:25:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 13:25:38 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 13:25:38 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:25:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:25:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:25:38 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:25:38 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:25:38 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/categorias
2025-07-13 13:25:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-07-13 13:25:38 [http-nio-8080-exec-5] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Solicitando todas las categor√≠as
2025-07-13 13:25:38 [http-nio-8080-exec-5] DEBUG c.j.i.service.CategoriaService - Obteniendo todas las categor√≠as
2025-07-13 13:25:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0
2025-07-13 13:25:38 [http-nio-8080-exec-5] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Encontradas 6 categor√≠as
2025-07-13 13:28:00 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/productos
2025-07-13 13:28:00 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: POST /api/productos
2025-07-13 13:28:00 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:28:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:28:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:28:00 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:28:00 [http-nio-8080-exec-7] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:28:00 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 13:28:00 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/productos
2025-07-13 13:28:01 [http-nio-8080-exec-7] INFO  c.j.i.controller.ProductoController - POST /api/productos - Creando nuevo producto: ProductoRequest{nombre='Tv Samsun 32 ''', precio=99000, categoriaId=1, tieneImagen=false}
2025-07-13 13:28:01 [http-nio-8080-exec-7] DEBUG c.j.i.service.ProductoService - Creando nuevo producto: Tv Samsun 32 ''
2025-07-13 13:28:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id 
    from
        productos p1_0 
    where
        p1_0.nombre=? 
    limit
        ?
2025-07-13 13:28:01 [http-nio-8080-exec-7] DEBUG c.j.i.service.CategoriaService - Obteniendo categor√≠a por ID: 1
2025-07-13 13:28:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 13:28:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        productos
        (categoria_id, descripcion, fecha_actualizacion, fecha_creacion, imagen, nombre, precio, stock_actual, stock_minimo) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-13 13:28:01 [http-nio-8080-exec-7] INFO  c.j.i.service.ProductoService - Producto creado exitosamente con ID: 3 - Tv Samsun 32 ''
2025-07-13 13:28:01 [http-nio-8080-exec-7] INFO  c.j.i.controller.ProductoController - POST /api/productos - Producto creado exitosamente con ID: 3
2025-07-13 13:28:01 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 13:28:01 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 13:28:01 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:28:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:28:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:28:01 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:28:01 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:28:01 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 13:28:01 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 13:28:01 [http-nio-8080-exec-8] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 13:28:01 [http-nio-8080-exec-8] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 13:28:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 13:28:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 13:28:01 [http-nio-8080-exec-8] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 13:34:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/estadisticas-stock
2025-07-13 13:34:38 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/estadisticas-stock
2025-07-13 13:34:38 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:34:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:34:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:34:38 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:34:38 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:34:38 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/estadisticas-stock
2025-07-13 13:34:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/estadisticas-stock
2025-07-13 13:34:38 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Solicitando estad√≠sticas de stock
2025-07-13 13:34:38 [http-nio-8080-exec-1] DEBUG c.j.i.service.ProductoService - Obteniendo estad√≠sticas de stock
2025-07-13 13:34:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id),
        count(case 
            when p1_0.stock_actual<=p1_0.stock_minimo 
                then 1 
        end),
        count(case 
            when p1_0.stock_actual=0 
                then 1 
        end) 
    from
        productos p1_0
2025-07-13 13:34:38 [http-nio-8080-exec-1] ERROR c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Error interno: class [Ljava.lang.Object; cannot be cast to class java.lang.Number ([Ljava.lang.Object; and java.lang.Number are in module java.base of loader 'bootstrap')
2025-07-13 13:34:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/estadisticas-stock
2025-07-13 13:34:49 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/estadisticas-stock
2025-07-13 13:34:49 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:34:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:34:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:34:49 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:34:49 [http-nio-8080-exec-3] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:34:49 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/estadisticas-stock
2025-07-13 13:34:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/estadisticas-stock
2025-07-13 13:34:49 [http-nio-8080-exec-3] INFO  c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Solicitando estad√≠sticas de stock
2025-07-13 13:34:49 [http-nio-8080-exec-3] DEBUG c.j.i.service.ProductoService - Obteniendo estad√≠sticas de stock
2025-07-13 13:34:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id),
        count(case 
            when p1_0.stock_actual<=p1_0.stock_minimo 
                then 1 
        end),
        count(case 
            when p1_0.stock_actual=0 
                then 1 
        end) 
    from
        productos p1_0
2025-07-13 13:34:49 [http-nio-8080-exec-3] ERROR c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Error interno: class [Ljava.lang.Object; cannot be cast to class java.lang.Number ([Ljava.lang.Object; and java.lang.Number are in module java.base of loader 'bootstrap')
2025-07-13 13:41:23 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Starting InventarioTiendaApplication using Java 21.0.7 with PID 20660 (D:\DesarrolloSoftware\Java\inventario-tienda\build\classes\java\main started by josel in D:\DesarrolloSoftware\Java\inventario-tienda)
2025-07-13 13:41:23 [restartedMain] DEBUG c.j.i.InventarioTiendaApplication - Running with Spring Boot v3.5.2, Spring v6.2.8
2025-07-13 13:41:23 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - The following 1 profile is active: "dev"
2025-07-13 13:41:23 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 13:41:23 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 13:41:24 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:41:24 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 51 ms. Found 5 JPA repository interfaces.
2025-07-13 13:41:25 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:41:25 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:41:25 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:41:26 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:41:26 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2109 ms
2025-07-13 13:41:26 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:41:26 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-13 13:41:26 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:41:26 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:41:26 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 13:41:26 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@31a08894
2025-07-13 13:41:26 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 13:41:26 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-13 13:41:26 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-13 13:41:26 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-13 13:41:27 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:41:27 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:41:28 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 13:41:29 [restartedMain] INFO  c.jlzDev.inventario.security.JwtUtil - JwtUtil inicializado - Expiraci√≥n: 24h, Refresh: 30d, Clave: 856bits
2025-07-13 13:41:29 [restartedMain] DEBUG c.j.i.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-13 13:41:29 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-13 13:41:30 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-07-13 13:41:30 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-07-13 13:41:30 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:41:30 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:41:30 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:41:30 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:41:30 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:41:30 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:41:30 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:41:30 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:41:30 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:41:30 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:41:30 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-13 13:41:30 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:41:30 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:41:30 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Started InventarioTiendaApplication in 7.227 seconds (process running for 7.706)
2025-07-13 13:41:55 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 13:41:55 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 13:41:55 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/estadisticas-stock
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/estadisticas-stock
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:41:55 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/estadisticas-stock
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/estadisticas-stock
2025-07-13 13:41:55 [http-nio-8080-exec-2] INFO  c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Solicitando estad√≠sticas de stock
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG c.j.i.service.ProductoService - Obteniendo estad√≠sticas de stock
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id),
        sum(case 
            when p1_0.stock_actual<=p1_0.stock_minimo 
                then 1 
            else 0 
    end),
    sum(case 
        when p1_0.stock_actual=0 
            then 1 
        else 0 
end) 
from
    productos p1_0
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG c.j.i.service.ProductoService - Resultado de query - Tipo: Object[], Longitud: 1
2025-07-13 13:41:55 [http-nio-8080-exec-2] DEBUG c.j.i.service.ProductoService - stats[0] = [3, 3, 3] (tipo: Object[])
2025-07-13 13:41:55 [http-nio-8080-exec-2] WARN  c.j.i.service.ProductoService - Tipo inesperado en estad√≠sticas: class [Ljava.lang.Object; - [3, 3, 3]
2025-07-13 13:41:55 [http-nio-8080-exec-2] ERROR c.j.i.service.ProductoService - Error al obtener estad√≠sticas de stock: Index 1 out of bounds for length 1
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
	at com.jlzDev.inventario.service.ProductoService.obtenerEstadisticasStock(ProductoService.java:382)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.jlzDev.inventario.service.ProductoService$$SpringCGLIB$$0.obtenerEstadisticasStock(<generated>)
	at com.jlzDev.inventario.controller.ProductoController.obtenerEstadisticasStock(ProductoController.java:609)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:144)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 13:41:55 [http-nio-8080-exec-2] ERROR c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Error interno: Error al calcular estad√≠sticas de stock
2025-07-13 13:42:42 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/estadisticas-stock
2025-07-13 13:42:42 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/estadisticas-stock
2025-07-13 13:42:42 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:42:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:42:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:42:42 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:42:42 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:42:43 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/estadisticas-stock
2025-07-13 13:42:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/estadisticas-stock
2025-07-13 13:42:43 [http-nio-8080-exec-4] INFO  c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Solicitando estad√≠sticas de stock
2025-07-13 13:42:43 [http-nio-8080-exec-4] DEBUG c.j.i.service.ProductoService - Obteniendo estad√≠sticas de stock
2025-07-13 13:42:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id),
        sum(case 
            when p1_0.stock_actual<=p1_0.stock_minimo 
                then 1 
            else 0 
    end),
    sum(case 
        when p1_0.stock_actual=0 
            then 1 
        else 0 
end) 
from
    productos p1_0
2025-07-13 13:42:43 [http-nio-8080-exec-4] DEBUG c.j.i.service.ProductoService - Resultado de query - Tipo: Object[], Longitud: 1
2025-07-13 13:42:43 [http-nio-8080-exec-4] DEBUG c.j.i.service.ProductoService - stats[0] = [3, 3, 1] (tipo: Object[])
2025-07-13 13:42:43 [http-nio-8080-exec-4] WARN  c.j.i.service.ProductoService - Tipo inesperado en estad√≠sticas: class [Ljava.lang.Object; - [3, 3, 1]
2025-07-13 13:42:43 [http-nio-8080-exec-4] ERROR c.j.i.service.ProductoService - Error al obtener estad√≠sticas de stock: Index 1 out of bounds for length 1
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
	at com.jlzDev.inventario.service.ProductoService.obtenerEstadisticasStock(ProductoService.java:382)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.jlzDev.inventario.service.ProductoService$$SpringCGLIB$$0.obtenerEstadisticasStock(<generated>)
	at com.jlzDev.inventario.controller.ProductoController.obtenerEstadisticasStock(ProductoController.java:609)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:144)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 13:42:43 [http-nio-8080-exec-4] ERROR c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Error interno: Error al calcular estad√≠sticas de stock
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/estadisticas-stock
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/estadisticas-stock
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:42:56 [http-nio-8080-exec-7] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/estadisticas-stock
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/estadisticas-stock
2025-07-13 13:42:56 [http-nio-8080-exec-7] INFO  c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Solicitando estad√≠sticas de stock
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG c.j.i.service.ProductoService - Obteniendo estad√≠sticas de stock
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id),
        sum(case 
            when p1_0.stock_actual<=p1_0.stock_minimo 
                then 1 
            else 0 
    end),
    sum(case 
        when p1_0.stock_actual=0 
            then 1 
        else 0 
end) 
from
    productos p1_0
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG c.j.i.service.ProductoService - Resultado de query - Tipo: Object[], Longitud: 1
2025-07-13 13:42:56 [http-nio-8080-exec-7] DEBUG c.j.i.service.ProductoService - stats[0] = [3, 3, 0] (tipo: Object[])
2025-07-13 13:42:56 [http-nio-8080-exec-7] WARN  c.j.i.service.ProductoService - Tipo inesperado en estad√≠sticas: class [Ljava.lang.Object; - [3, 3, 0]
2025-07-13 13:42:56 [http-nio-8080-exec-7] ERROR c.j.i.service.ProductoService - Error al obtener estad√≠sticas de stock: Index 1 out of bounds for length 1
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
	at com.jlzDev.inventario.service.ProductoService.obtenerEstadisticasStock(ProductoService.java:382)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.jlzDev.inventario.service.ProductoService$$SpringCGLIB$$0.obtenerEstadisticasStock(<generated>)
	at com.jlzDev.inventario.controller.ProductoController.obtenerEstadisticasStock(ProductoController.java:609)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:144)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 13:42:56 [http-nio-8080-exec-7] ERROR c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Error interno: Error al calcular estad√≠sticas de stock
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/estadisticas-stock
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/estadisticas-stock
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:43:03 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/estadisticas-stock
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/estadisticas-stock
2025-07-13 13:43:03 [http-nio-8080-exec-8] INFO  c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Solicitando estad√≠sticas de stock
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG c.j.i.service.ProductoService - Obteniendo estad√≠sticas de stock
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(p1_0.id),
        sum(case 
            when p1_0.stock_actual<=p1_0.stock_minimo 
                then 1 
            else 0 
    end),
    sum(case 
        when p1_0.stock_actual=0 
            then 1 
        else 0 
end) 
from
    productos p1_0
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG c.j.i.service.ProductoService - Resultado de query - Tipo: Object[], Longitud: 1
2025-07-13 13:43:03 [http-nio-8080-exec-8] DEBUG c.j.i.service.ProductoService - stats[0] = [3, 3, 0] (tipo: Object[])
2025-07-13 13:43:03 [http-nio-8080-exec-8] WARN  c.j.i.service.ProductoService - Tipo inesperado en estad√≠sticas: class [Ljava.lang.Object; - [3, 3, 0]
2025-07-13 13:43:03 [http-nio-8080-exec-8] ERROR c.j.i.service.ProductoService - Error al obtener estad√≠sticas de stock: Index 1 out of bounds for length 1
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
	at com.jlzDev.inventario.service.ProductoService.obtenerEstadisticasStock(ProductoService.java:382)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.jlzDev.inventario.service.ProductoService$$SpringCGLIB$$0.obtenerEstadisticasStock(<generated>)
	at com.jlzDev.inventario.controller.ProductoController.obtenerEstadisticasStock(ProductoController.java:609)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:144)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 13:43:03 [http-nio-8080-exec-8] ERROR c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Error interno: Error al calcular estad√≠sticas de stock
2025-07-13 13:43:57 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Starting InventarioTiendaApplication using Java 21.0.7 with PID 23480 (D:\DesarrolloSoftware\Java\inventario-tienda\build\classes\java\main started by josel in D:\DesarrolloSoftware\Java\inventario-tienda)
2025-07-13 13:43:57 [restartedMain] DEBUG c.j.i.InventarioTiendaApplication - Running with Spring Boot v3.5.2, Spring v6.2.8
2025-07-13 13:43:57 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - The following 1 profile is active: "dev"
2025-07-13 13:43:57 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 13:43:57 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 13:43:58 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:43:58 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 51 ms. Found 5 JPA repository interfaces.
2025-07-13 13:43:59 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:43:59 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:43:59 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:43:59 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:43:59 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2118 ms
2025-07-13 13:43:59 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:43:59 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-13 13:43:59 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:44:00 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:44:00 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 13:44:00 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5de471d8
2025-07-13 13:44:00 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 13:44:00 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-13 13:44:00 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-13 13:44:00 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-13 13:44:01 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:44:01 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:44:01 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 13:44:02 [restartedMain] INFO  c.jlzDev.inventario.security.JwtUtil - JwtUtil inicializado - Expiraci√≥n: 24h, Refresh: 30d, Clave: 856bits
2025-07-13 13:44:02 [restartedMain] DEBUG c.j.i.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-13 13:44:03 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-13 13:44:03 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-07-13 13:44:03 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-07-13 13:44:03 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:44:03 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:44:03 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:44:03 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:44:03 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:44:03 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:44:03 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:44:03 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:44:03 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:44:03 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:44:03 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-13 13:44:04 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:44:04 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:44:04 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Started InventarioTiendaApplication in 7.239 seconds (process running for 7.686)
2025-07-13 13:44:10 [http-nio-8080-exec-4] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 13:44:10 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 13:44:10 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-07-13 13:44:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/estadisticas-stock
2025-07-13 13:44:10 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/estadisticas-stock
2025-07-13 13:44:10 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:44:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:44:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:44:10 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:44:10 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:44:10 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/estadisticas-stock
2025-07-13 13:44:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/estadisticas-stock
2025-07-13 13:44:11 [http-nio-8080-exec-4] INFO  c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Solicitando estad√≠sticas de stock
2025-07-13 13:44:11 [http-nio-8080-exec-4] DEBUG c.j.i.service.ProductoService - Obteniendo estad√≠sticas de stock
2025-07-13 13:44:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    SELECT
        COUNT(*) as total,
        SUM(CASE 
            WHEN stock_actual <= stock_minimo 
                THEN 1 
            ELSE 0 
    END) as stock_bajo,
    SUM(CASE 
        WHEN stock_actual = 0 
            THEN 1 
        ELSE 0 
END) as sin_stock 
FROM
    productos 
2025-07-13 13:44:11 [http-nio-8080-exec-4] DEBUG c.j.i.service.ProductoService - Resultado de query - Tipo: Object[], Longitud: 1
2025-07-13 13:44:11 [http-nio-8080-exec-4] DEBUG c.j.i.service.ProductoService - stats[0] = [3, 3, 0] (tipo: Object[])
2025-07-13 13:44:11 [http-nio-8080-exec-4] WARN  c.j.i.service.ProductoService - Tipo inesperado en estad√≠sticas: class [Ljava.lang.Object; - [3, 3, 0]
2025-07-13 13:44:11 [http-nio-8080-exec-4] ERROR c.j.i.service.ProductoService - Error al obtener estad√≠sticas de stock: Index 1 out of bounds for length 1
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
	at com.jlzDev.inventario.service.ProductoService.obtenerEstadisticasStock(ProductoService.java:382)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.jlzDev.inventario.service.ProductoService$$SpringCGLIB$$0.obtenerEstadisticasStock(<generated>)
	at com.jlzDev.inventario.controller.ProductoController.obtenerEstadisticasStock(ProductoController.java:609)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:144)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 13:44:11 [http-nio-8080-exec-4] ERROR c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Error interno: Error al calcular estad√≠sticas de stock
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/estadisticas-stock
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/estadisticas-stock
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:47:40 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/estadisticas-stock
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/estadisticas-stock
2025-07-13 13:47:40 [http-nio-8080-exec-8] INFO  c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Solicitando estad√≠sticas de stock
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG c.j.i.service.ProductoService - Obteniendo estad√≠sticas de stock
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    SELECT
        COUNT(*) as total,
        SUM(CASE 
            WHEN stock_actual <= stock_minimo 
                THEN 1 
            ELSE 0 
    END) as stock_bajo,
    SUM(CASE 
        WHEN stock_actual = 0 
            THEN 1 
        ELSE 0 
END) as sin_stock 
FROM
    productos 
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG c.j.i.service.ProductoService - Resultado de query - Tipo: Object[], Longitud: 1
2025-07-13 13:47:40 [http-nio-8080-exec-8] DEBUG c.j.i.service.ProductoService - stats[0] = [3, 3, 0] (tipo: Object[])
2025-07-13 13:47:40 [http-nio-8080-exec-8] WARN  c.j.i.service.ProductoService - Tipo inesperado en estad√≠sticas: class [Ljava.lang.Object; - [3, 3, 0]
2025-07-13 13:47:40 [http-nio-8080-exec-8] ERROR c.j.i.service.ProductoService - Error al obtener estad√≠sticas de stock: Index 1 out of bounds for length 1
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
	at com.jlzDev.inventario.service.ProductoService.obtenerEstadisticasStock(ProductoService.java:382)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.jlzDev.inventario.service.ProductoService$$SpringCGLIB$$0.obtenerEstadisticasStock(<generated>)
	at com.jlzDev.inventario.controller.ProductoController.obtenerEstadisticasStock(ProductoController.java:609)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:144)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 13:47:40 [http-nio-8080-exec-8] ERROR c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Error interno: Error al calcular estad√≠sticas de stock
2025-07-13 13:49:38 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Starting InventarioTiendaApplication using Java 21.0.7 with PID 18056 (D:\DesarrolloSoftware\Java\inventario-tienda\build\classes\java\main started by josel in D:\DesarrolloSoftware\Java\inventario-tienda)
2025-07-13 13:49:38 [restartedMain] DEBUG c.j.i.InventarioTiendaApplication - Running with Spring Boot v3.5.2, Spring v6.2.8
2025-07-13 13:49:38 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - The following 1 profile is active: "dev"
2025-07-13 13:49:38 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 13:49:38 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 13:49:39 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:49:39 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 50 ms. Found 5 JPA repository interfaces.
2025-07-13 13:49:40 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:49:40 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:49:40 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:49:40 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:49:40 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2100 ms
2025-07-13 13:49:41 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:49:41 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-13 13:49:41 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:49:41 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:49:41 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 13:49:41 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@49cb6855
2025-07-13 13:49:41 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 13:49:41 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-13 13:49:41 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-13 13:49:41 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-13 13:49:42 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:49:42 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:49:43 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 13:49:44 [restartedMain] INFO  c.jlzDev.inventario.security.JwtUtil - JwtUtil inicializado - Expiraci√≥n: 24h, Refresh: 30d, Clave: 856bits
2025-07-13 13:49:44 [restartedMain] DEBUG c.j.i.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-13 13:49:44 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-13 13:49:45 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-07-13 13:49:45 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-07-13 13:49:45 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:49:45 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:49:45 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:49:45 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:49:45 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:49:45 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:49:45 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:49:45 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:49:45 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:49:45 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:49:45 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-13 13:49:45 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:49:45 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:49:45 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Started InventarioTiendaApplication in 7.471 seconds (process running for 7.889)
2025-07-13 13:50:33 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Starting InventarioTiendaApplication using Java 21.0.7 with PID 12340 (D:\DesarrolloSoftware\Java\inventario-tienda\build\classes\java\main started by josel in D:\DesarrolloSoftware\Java\inventario-tienda)
2025-07-13 13:50:33 [restartedMain] DEBUG c.j.i.InventarioTiendaApplication - Running with Spring Boot v3.5.2, Spring v6.2.8
2025-07-13 13:50:33 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - The following 1 profile is active: "dev"
2025-07-13 13:50:33 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-13 13:50:33 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-13 13:50:35 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-13 13:50:35 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 63 ms. Found 5 JPA repository interfaces.
2025-07-13 13:50:36 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-13 13:50:36 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-13 13:50:36 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-13 13:50:36 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-07-13 13:50:36 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2786 ms
2025-07-13 13:50:36 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-13 13:50:36 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-13 13:50:37 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-13 13:50:37 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-13 13:50:37 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-13 13:50:37 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@58d2991
2025-07-13 13:50:37 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-13 13:50:37 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-13 13:50:37 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-13 13:50:37 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-13 13:50:38 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-13 13:50:38 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-13 13:50:39 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-13 13:50:40 [restartedMain] INFO  c.jlzDev.inventario.security.JwtUtil - JwtUtil inicializado - Expiraci√≥n: 24h, Refresh: 30d, Clave: 856bits
2025-07-13 13:50:40 [restartedMain] DEBUG c.j.i.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-13 13:50:40 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-13 13:50:41 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-07-13 13:50:41 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-07-13 13:50:41 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:50:41 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:50:41 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:50:41 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/productos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:50:41 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:50:41 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:50:41 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [PUT, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:50:41 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [DELETE, /api/categorias/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:50:41 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [GET, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:50:41 [restartedMain] WARN  o.s.s.c.a.w.c.AuthorizeHttpRequestsConfigurer$AuthorizationManagerRequestMatcherRegistry - One of the patterns in [POST, /api/movimientos/**] is missing a leading slash. This is discouraged; please include the leading slash in all your request matcher patterns. In future versions of Spring Security, leaving out the leading slash will result in an exception.
2025-07-13 13:50:41 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-13 13:50:41 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-07-13 13:50:41 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-07-13 13:50:41 [restartedMain] INFO  c.j.i.InventarioTiendaApplication - Started InventarioTiendaApplication in 8.596 seconds (process running for 9.062)
2025-07-13 13:50:47 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-13 13:50:47 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-13 13:50:47 [http-nio-8080-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/estadisticas-stock
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/estadisticas-stock
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:50:47 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/estadisticas-stock
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/estadisticas-stock
2025-07-13 13:50:47 [http-nio-8080-exec-2] INFO  c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Solicitando estad√≠sticas de stock
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG c.j.i.service.ProductoService - Obteniendo estad√≠sticas de stock
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    SELECT
        COUNT(*) as total,
        SUM(CASE 
            WHEN stock_actual <= stock_minimo 
                THEN 1 
            ELSE 0 
    END) as stock_bajo,
    SUM(CASE 
        WHEN stock_actual = 0 
            THEN 1 
        ELSE 0 
END) as sin_stock 
FROM
    productos 
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG c.j.i.service.ProductoService - Resultado de query - Tipo: Object[], Longitud: 1
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG c.j.i.service.ProductoService - result[0] = [3, 3, 0] (tipo: Object[])
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG c.j.i.service.ProductoService - Extrayendo array interno: [3, 3, 0]
2025-07-13 13:50:47 [http-nio-8080-exec-2] DEBUG c.j.i.service.ProductoService - Estad√≠sticas procesadas - Total: 3, Stock Bajo: 3, Sin Stock: 0
2025-07-13 13:50:47 [http-nio-8080-exec-2] INFO  c.j.i.controller.ProductoController - GET /api/productos/estadisticas-stock - Estad√≠sticas obtenidas
2025-07-13 13:54:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos
2025-07-13 13:54:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 13:54:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 13:54:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 13:54:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 13:54:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 13:54:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 13:54:36 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 13:54:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 13:54:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 13:54:36 [http-nio-8080-exec-4] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 13:54:36 [http-nio-8080-exec-4] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 13:54:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 13:54:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 13:54:36 [http-nio-8080-exec-4] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 14:13:25 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 14:13:25 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 14:13:25 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 14:13:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 14:13:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 14:13:25 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 14:13:25 [http-nio-8080-exec-7] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 14:13:25 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 14:13:25 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 14:13:25 [http-nio-8080-exec-7] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 14:13:25 [http-nio-8080-exec-7] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 14:13:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 14:13:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 14:13:25 [http-nio-8080-exec-7] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 14:15:40 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/categorias
2025-07-13 14:15:40 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 14:15:40 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 14:15:40 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 14:15:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 14:15:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 14:15:40 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 14:15:40 [http-nio-8080-exec-10] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 14:15:40 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/categorias
2025-07-13 14:15:40 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-07-13 14:15:40 [http-nio-8080-exec-10] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Solicitando todas las categor√≠as
2025-07-13 14:15:40 [http-nio-8080-exec-10] DEBUG c.j.i.service.CategoriaService - Obteniendo todas las categor√≠as
2025-07-13 14:15:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0
2025-07-13 14:15:40 [http-nio-8080-exec-10] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Encontradas 6 categor√≠as
2025-07-13 14:16:00 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/2
2025-07-13 14:16:00 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/2
2025-07-13 14:16:00 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/2
2025-07-13 14:16:00 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 14:16:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 14:16:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 14:16:00 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 14:16:00 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 14:16:00 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/2
2025-07-13 14:16:00 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/2
2025-07-13 14:16:00 [http-nio-8080-exec-2] INFO  c.j.i.controller.ProductoController - GET /api/productos/2 - Solicitando producto por ID
2025-07-13 14:16:00 [http-nio-8080-exec-2] DEBUG c.j.i.service.ProductoService - Obteniendo producto por ID: 2
2025-07-13 14:16:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id=p1_0.categoria_id 
    where
        p1_0.id=?
2025-07-13 14:16:00 [http-nio-8080-exec-2] INFO  c.j.i.controller.ProductoController - GET /api/productos/2 - Producto encontrado: iPhone 13 Mini
2025-07-13 14:16:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing PUT /api/productos/2
2025-07-13 14:16:21 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: PUT /api/productos/2
2025-07-13 14:16:21 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 14:16:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 14:16:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 14:16:21 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 14:16:21 [http-nio-8080-exec-3] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 14:16:21 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/2
2025-07-13 14:16:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured PUT /api/productos/2
2025-07-13 14:16:22 [http-nio-8080-exec-3] INFO  c.j.i.controller.ProductoController - PUT /api/productos/2 - Actualizando producto: ProductoRequest{nombre='iPhone 13 Mini', precio=1099.99, categoriaId=1, tieneImagen=false}
2025-07-13 14:16:22 [http-nio-8080-exec-3] DEBUG c.j.i.service.ProductoService - Actualizando producto con ID: 2
2025-07-13 14:16:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id=p1_0.categoria_id 
    where
        p1_0.id=?
2025-07-13 14:16:22 [http-nio-8080-exec-3] INFO  c.j.i.service.ProductoService - Producto actualizado exitosamente: iPhone 13 Mini
2025-07-13 14:16:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        productos 
    set
        categoria_id=?,
        descripcion=?,
        fecha_actualizacion=?,
        imagen=?,
        nombre=?,
        precio=?,
        stock_actual=?,
        stock_minimo=? 
    where
        id=?
2025-07-13 14:16:22 [http-nio-8080-exec-3] INFO  c.j.i.controller.ProductoController - PUT /api/productos/2 - Producto actualizado exitosamente
2025-07-13 14:16:22 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 14:16:22 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 14:16:22 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 14:16:22 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 14:16:22 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 14:16:22 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 14:16:22 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 14:16:22 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 14:16:22 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 14:16:22 [http-nio-8080-exec-5] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 14:16:22 [http-nio-8080-exec-5] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 14:16:22 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 14:16:22 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 14:16:22 [http-nio-8080-exec-5] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 15:16:24 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=35m16s483ms4¬µs300ns).
2025-07-13 15:16:32 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos
2025-07-13 15:16:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 15:16:32 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 15:16:32 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 15:16:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 15:16:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 15:16:32 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 15:16:32 [http-nio-8080-exec-7] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 15:16:32 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 15:16:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 15:16:32 [http-nio-8080-exec-7] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 15:16:32 [http-nio-8080-exec-7] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 15:16:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 15:16:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 15:16:32 [http-nio-8080-exec-7] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 15:38:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 15:38:10 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 15:38:10 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 15:38:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 15:38:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 15:38:10 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 15:38:10 [http-nio-8080-exec-9] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 15:38:10 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 15:38:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 15:38:10 [http-nio-8080-exec-9] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 15:38:10 [http-nio-8080-exec-9] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 15:38:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 15:38:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 15:38:10 [http-nio-8080-exec-9] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 15:38:49 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/categorias
2025-07-13 15:38:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 15:38:49 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 15:38:49 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 15:38:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 15:38:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 15:38:49 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 15:38:49 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 15:38:49 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/categorias
2025-07-13 15:38:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-07-13 15:38:49 [http-nio-8080-exec-1] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Solicitando todas las categor√≠as
2025-07-13 15:38:49 [http-nio-8080-exec-1] DEBUG c.j.i.service.CategoriaService - Obteniendo todas las categor√≠as
2025-07-13 15:38:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0
2025-07-13 15:38:49 [http-nio-8080-exec-1] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Encontradas 6 categor√≠as
2025-07-13 15:46:17 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/categorias
2025-07-13 15:46:17 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/categorias
2025-07-13 15:46:17 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 15:46:17 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 15:46:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 15:46:18 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 15:46:18 [http-nio-8080-exec-3] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 15:46:18 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/categorias
2025-07-13 15:46:18 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/categorias
2025-07-13 15:46:18 [http-nio-8080-exec-3] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Solicitando todas las categor√≠as
2025-07-13 15:46:18 [http-nio-8080-exec-3] DEBUG c.j.i.service.CategoriaService - Obteniendo todas las categor√≠as
2025-07-13 15:46:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0
2025-07-13 15:46:18 [http-nio-8080-exec-3] INFO  c.j.i.controller.CategoriaController - GET /api/categorias - Encontradas 6 categor√≠as
2025-07-13 15:46:27 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 15:46:27 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 15:46:27 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 15:46:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 15:46:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 15:46:27 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 15:46:27 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 15:46:27 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 15:46:27 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 15:46:27 [http-nio-8080-exec-5] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 15:46:27 [http-nio-8080-exec-5] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 15:46:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 15:46:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 15:46:27 [http-nio-8080-exec-5] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 15:46:37 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos/2
2025-07-13 15:46:37 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos/2
2025-07-13 15:46:37 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos/2
2025-07-13 15:46:37 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 15:46:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 15:46:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 15:46:37 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 15:46:37 [http-nio-8080-exec-6] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 15:46:37 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos/2
2025-07-13 15:46:37 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos/2
2025-07-13 15:46:37 [http-nio-8080-exec-6] INFO  c.j.i.controller.ProductoController - GET /api/productos/2 - Solicitando producto por ID
2025-07-13 15:46:37 [http-nio-8080-exec-6] DEBUG c.j.i.service.ProductoService - Obteniendo producto por ID: 2
2025-07-13 15:46:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0 
    join
        categorias c1_0 
            on c1_0.id=p1_0.categoria_id 
    where
        p1_0.id=?
2025-07-13 15:46:37 [http-nio-8080-exec-6] INFO  c.j.i.controller.ProductoController - GET /api/productos/2 - Producto encontrado: iPhone 13 Mini
2025-07-13 19:12:24 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3h28s985ms195¬µs800ns).
2025-07-13 20:57:12 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/productos
2025-07-13 20:57:12 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 20:57:12 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 20:57:12 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 20:57:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 20:57:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 20:57:12 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 20:57:12 [http-nio-8080-exec-9] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 20:57:12 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 20:57:12 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 20:57:12 [http-nio-8080-exec-9] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 20:57:12 [http-nio-8080-exec-9] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 20:57:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 20:57:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 20:57:12 [http-nio-8080-exec-9] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 20:57:22 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h45m6s735ms555¬µs).
2025-07-13 21:17:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 21:17:54 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 21:17:54 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:17:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:17:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:17:54 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:17:54 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:17:54 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 21:17:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 21:17:54 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 21:17:54 [http-nio-8080-exec-1] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 21:17:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 21:17:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 21:17:54 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 21:18:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 21:18:02 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 21:18:02 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:18:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:18:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:18:02 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:18:02 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:18:02 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 21:18:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 21:18:02 [http-nio-8080-exec-2] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 21:18:02 [http-nio-8080-exec-2] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 21:18:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 21:18:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 21:18:02 [http-nio-8080-exec-2] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 21:18:10 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 21:18:10 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 21:18:10 [http-nio-8080-exec-5] WARN  c.jlzDev.inventario.security.JwtUtil - Error al extraer claims del token: JWT expired at 2025-07-13T19:08:42Z. Current time: 2025-07-14T02:18:10Z, a difference of 25768020 milliseconds.  Allowed clock skew: 0 milliseconds.
2025-07-13 21:18:10 [http-nio-8080-exec-5] ERROR c.j.i.s.JwtAuthenticationFilter - Error inesperado en filtro JWT para request /api/productos: JWT expired at 2025-07-13T19:08:42Z. Current time: 2025-07-14T02:18:10Z, a difference of 25768020 milliseconds.  Allowed clock skew: 0 milliseconds.
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-07-13T19:08:42Z. Current time: 2025-07-14T02:18:10Z, a difference of 25768020 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at com.jlzDev.inventario.security.JwtUtil.extractAllClaims(JwtUtil.java:220)
	at com.jlzDev.inventario.security.JwtUtil.extractClaim(JwtUtil.java:209)
	at com.jlzDev.inventario.security.JwtUtil.extractUsername(JwtUtil.java:158)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 21:18:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-07-13 21:18:19 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: POST /api/auth/login
2025-07-13 21:18:19 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Endpoint p√∫blico detectado: /api/auth/login. Saltando validaci√≥n JWT
2025-07-13 21:18:19 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-13 21:18:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-07-13 21:18:19 [http-nio-8080-exec-4] INFO  c.j.i.controller.AuthController - POST /api/auth/login - Intento de login: username=admin, deviceInfo=Postman Client, rememberMe=false
2025-07-13 21:18:19 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Intentando cargar usuario por username o email: admin
2025-07-13 21:18:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        (
            u1_0.username=? 
            or u1_0.email=?
        ) 
        and u1_0.activo=1
2025-07-13 21:18:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:18:19 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:18:19 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente por username/email: admin (username real: admin) con rol: ADMIN
2025-07-13 21:18:19 [http-nio-8080-exec-4] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: admin
2025-07-13 21:18:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 21:18:20 [http-nio-8080-exec-4] DEBUG c.jlzDev.inventario.security.JwtUtil - Generando access token para usuario: admin
2025-07-13 21:18:20 [http-nio-8080-exec-4] INFO  c.jlzDev.inventario.security.JwtUtil - Access token generado exitosamente para usuario: admin
2025-07-13 21:18:20 [http-nio-8080-exec-4] DEBUG c.jlzDev.inventario.security.JwtUtil - Generando refresh token para usuario: admin
2025-07-13 21:18:20 [http-nio-8080-exec-4] INFO  c.jlzDev.inventario.security.JwtUtil - Refresh token generado exitosamente para usuario: admin
2025-07-13 21:18:20 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:18:20 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:18:20 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:18:20 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:18:20 [http-nio-8080-exec-4] INFO  c.j.i.controller.AuthController - Login exitoso para usuario: admin con sessionId: admin_1752459500045_1dd1889d
2025-07-13 21:18:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 21:18:29 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 21:18:29 [http-nio-8080-exec-7] WARN  c.jlzDev.inventario.security.JwtUtil - Error al extraer claims del token: JWT expired at 2025-07-13T19:08:42Z. Current time: 2025-07-14T02:18:29Z, a difference of 25787921 milliseconds.  Allowed clock skew: 0 milliseconds.
2025-07-13 21:18:29 [http-nio-8080-exec-7] ERROR c.j.i.s.JwtAuthenticationFilter - Error inesperado en filtro JWT para request /api/productos: JWT expired at 2025-07-13T19:08:42Z. Current time: 2025-07-14T02:18:29Z, a difference of 25787921 milliseconds.  Allowed clock skew: 0 milliseconds.
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-07-13T19:08:42Z. Current time: 2025-07-14T02:18:29Z, a difference of 25787921 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at com.jlzDev.inventario.security.JwtUtil.extractAllClaims(JwtUtil.java:220)
	at com.jlzDev.inventario.security.JwtUtil.extractClaim(JwtUtil.java:209)
	at com.jlzDev.inventario.security.JwtUtil.extractUsername(JwtUtil.java:158)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 21:18:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 21:18:53 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 21:18:53 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:18:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:18:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:18:53 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:18:53 [http-nio-8080-exec-9] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:18:53 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 21:18:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 21:18:53 [http-nio-8080-exec-9] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 21:18:53 [http-nio-8080-exec-9] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 21:18:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 21:18:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 21:18:53 [http-nio-8080-exec-9] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 21:19:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 21:19:15 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 21:19:15 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:19:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:19:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:19:15 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:19:15 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:19:15 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 21:19:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 21:19:15 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 21:19:15 [http-nio-8080-exec-1] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 21:19:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 21:19:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 21:19:15 [http-nio-8080-exec-1] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 21:19:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 21:19:21 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 21:19:21 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:19:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:19:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:19:21 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:19:21 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:19:21 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 21:19:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 21:19:21 [http-nio-8080-exec-2] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 21:19:21 [http-nio-8080-exec-2] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 21:19:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 21:19:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 21:19:21 [http-nio-8080-exec-2] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 21:26:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 21:26:11 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 21:26:11 [http-nio-8080-exec-4] WARN  c.jlzDev.inventario.security.JwtUtil - Error al extraer claims del token: JWT expired at 2025-07-06T19:08:00Z. Current time: 2025-07-14T02:26:11Z, a difference of 631091185 milliseconds.  Allowed clock skew: 0 milliseconds.
2025-07-13 21:26:11 [http-nio-8080-exec-4] ERROR c.j.i.s.JwtAuthenticationFilter - Error inesperado en filtro JWT para request /api/usuarios: JWT expired at 2025-07-06T19:08:00Z. Current time: 2025-07-14T02:26:11Z, a difference of 631091185 milliseconds.  Allowed clock skew: 0 milliseconds.
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-07-06T19:08:00Z. Current time: 2025-07-14T02:26:11Z, a difference of 631091185 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at com.jlzDev.inventario.security.JwtUtil.extractAllClaims(JwtUtil.java:220)
	at com.jlzDev.inventario.security.JwtUtil.extractClaim(JwtUtil.java:209)
	at com.jlzDev.inventario.security.JwtUtil.extractUsername(JwtUtil.java:158)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/auth/login
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: POST /api/auth/login
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Endpoint p√∫blico detectado: /api/auth/login. Saltando validaci√≥n JWT
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/auth/login
2025-07-13 21:26:20 [http-nio-8080-exec-8] INFO  c.j.i.controller.AuthController - POST /api/auth/login - Intento de login: username=admin, deviceInfo=Postman Client, rememberMe=false
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Intentando cargar usuario por username o email: admin
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        (
            u1_0.username=? 
            or u1_0.email=?
        ) 
        and u1_0.activo=1
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:26:20 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente por username/email: admin (username real: admin) con rol: ADMIN
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: admin
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG c.jlzDev.inventario.security.JwtUtil - Generando access token para usuario: admin
2025-07-13 21:26:20 [http-nio-8080-exec-8] INFO  c.jlzDev.inventario.security.JwtUtil - Access token generado exitosamente para usuario: admin
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG c.jlzDev.inventario.security.JwtUtil - Generando refresh token para usuario: admin
2025-07-13 21:26:20 [http-nio-8080-exec-8] INFO  c.jlzDev.inventario.security.JwtUtil - Refresh token generado exitosamente para usuario: admin
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:26:20 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:26:20 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:26:20 [http-nio-8080-exec-8] INFO  c.j.i.controller.AuthController - Login exitoso para usuario: admin con sessionId: admin_1752459980938_8ed0e9f1
2025-07-13 21:26:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 21:26:35 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 21:26:35 [http-nio-8080-exec-9] WARN  c.jlzDev.inventario.security.JwtUtil - Error al extraer claims del token: JWT expired at 2025-07-06T19:08:00Z. Current time: 2025-07-14T02:26:35Z, a difference of 631115919 milliseconds.  Allowed clock skew: 0 milliseconds.
2025-07-13 21:26:35 [http-nio-8080-exec-9] ERROR c.j.i.s.JwtAuthenticationFilter - Error inesperado en filtro JWT para request /api/usuarios: JWT expired at 2025-07-06T19:08:00Z. Current time: 2025-07-14T02:26:35Z, a difference of 631115919 milliseconds.  Allowed clock skew: 0 milliseconds.
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-07-06T19:08:00Z. Current time: 2025-07-14T02:26:35Z, a difference of 631115919 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at com.jlzDev.inventario.security.JwtUtil.extractAllClaims(JwtUtil.java:220)
	at com.jlzDev.inventario.security.JwtUtil.extractClaim(JwtUtil.java:209)
	at com.jlzDev.inventario.security.JwtUtil.extractUsername(JwtUtil.java:158)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 21:26:43 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 21:26:43 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 21:26:43 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:26:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:26:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:26:43 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:26:43 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:26:43 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 21:26:43 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 21:26:43 [http-nio-8080-exec-1] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 21:26:43 [http-nio-8080-exec-1] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 21:26:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 21:26:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:26:43 [http-nio-8080-exec-1] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 1 usuarios
2025-07-13 21:29:52 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/activos
2025-07-13 21:29:52 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/activos
2025-07-13 21:29:52 [http-nio-8080-exec-5] WARN  c.jlzDev.inventario.security.JwtUtil - Error al extraer claims del token: JWT expired at 2025-07-05T03:36:52Z. Current time: 2025-07-14T02:29:52Z, a difference of 773580233 milliseconds.  Allowed clock skew: 0 milliseconds.
2025-07-13 21:29:52 [http-nio-8080-exec-5] ERROR c.j.i.s.JwtAuthenticationFilter - Error inesperado en filtro JWT para request /api/usuarios/activos: JWT expired at 2025-07-05T03:36:52Z. Current time: 2025-07-14T02:29:52Z, a difference of 773580233 milliseconds.  Allowed clock skew: 0 milliseconds.
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-07-05T03:36:52Z. Current time: 2025-07-14T02:29:52Z, a difference of 773580233 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at com.jlzDev.inventario.security.JwtUtil.extractAllClaims(JwtUtil.java:220)
	at com.jlzDev.inventario.security.JwtUtil.extractClaim(JwtUtil.java:209)
	at com.jlzDev.inventario.security.JwtUtil.extractUsername(JwtUtil.java:158)
	at com.jlzDev.inventario.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-07-13 21:30:42 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/activos
2025-07-13 21:30:42 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/activos
2025-07-13 21:30:42 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:30:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:30:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:30:42 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:30:42 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:30:42 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/activos
2025-07-13 21:30:42 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/activos
2025-07-13 21:30:42 [http-nio-8080-exec-4] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/activos - Solicitando usuarios activos
2025-07-13 21:30:42 [http-nio-8080-exec-4] DEBUG c.j.i.service.UsuarioService - Obteniendo usuarios activos
2025-07-13 21:30:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.activo
2025-07-13 21:30:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:30:42 [http-nio-8080-exec-4] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/activos - Encontrados 1 usuarios activos
2025-07-13 21:31:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/1
2025-07-13 21:31:05 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/1
2025-07-13 21:31:05 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:31:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:31:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:31:05 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:31:05 [http-nio-8080-exec-7] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:31:05 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/1
2025-07-13 21:31:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/1
2025-07-13 21:31:05 [http-nio-8080-exec-7] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/1 - Solicitando usuario por ID
2025-07-13 21:31:05 [http-nio-8080-exec-7] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por ID: 1
2025-07-13 21:31:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre,
        u1_0.username 
    from
        usuarios u1_0 
    join
        roles r1_0 
            on r1_0.id=u1_0.rol_id 
    where
        u1_0.id=?
2025-07-13 21:31:05 [http-nio-8080-exec-7] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/1 - Usuario encontrado: admin
2025-07-13 21:31:41 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=admin
2025-07-13 21:31:41 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 21:31:41 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:31:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:31:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:31:41 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:31:41 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:31:41 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 21:31:41 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=admin
2025-07-13 21:31:41 [http-nio-8080-exec-8] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=admin - Buscando usuario por username
2025-07-13 21:31:41 [http-nio-8080-exec-8] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: admin
2025-07-13 21:31:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 21:31:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:31:41 [http-nio-8080-exec-8] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario encontrado: admin
2025-07-13 21:32:22 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/por-rol/1
2025-07-13 21:32:22 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/por-rol/1
2025-07-13 21:32:22 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:32:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:32:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:32:22 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:32:22 [http-nio-8080-exec-9] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:32:22 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/por-rol/1
2025-07-13 21:32:22 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/por-rol/1
2025-07-13 21:32:22 [http-nio-8080-exec-9] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/por-rol/1 - Solicitando usuarios por rol
2025-07-13 21:32:22 [http-nio-8080-exec-9] DEBUG c.j.i.service.UsuarioService - Obteniendo usuarios por rol ID: 1
2025-07-13 21:32:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    left join
        roles r1_0 
            on r1_0.id=u1_0.rol_id 
    where
        r1_0.id=?
2025-07-13 21:32:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:32:22 [http-nio-8080-exec-9] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/por-rol/1 - Encontrados 1 usuarios
2025-07-13 21:33:39 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/usuarios?password=password123
2025-07-13 21:33:39 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: POST /api/usuarios
2025-07-13 21:33:39 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:33:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:33:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:33:39 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:33:39 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:33:39 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 21:33:39 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/usuarios?password=password123
2025-07-13 21:33:40 [http-nio-8080-exec-2] INFO  c.j.i.controller.UsuarioController - POST /api/usuarios - Creando nuevo usuario: UsuarioRequest{username='usuariotest', nombreCompleto='Usuario de Prueba', rolId=3, activo=true}
2025-07-13 21:33:40 [http-nio-8080-exec-2] DEBUG c.j.i.service.UsuarioService - Creando nuevo usuario: usuariotest
2025-07-13 21:33:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-07-13 21:33:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        usuarios u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-07-13 21:33:41 [http-nio-8080-exec-2] DEBUG c.j.inventario.service.RolService - Obteniendo rol por ID: 3
2025-07-13 21:33:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:33:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        usuarios
        (activo, email, fecha_creacion, nombre_completo, password, rol_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-13 21:33:41 [http-nio-8080-exec-2] INFO  c.j.i.service.UsuarioService - Usuario creado exitosamente con ID: 2 y username: usuariotest
2025-07-13 21:33:41 [http-nio-8080-exec-2] INFO  c.j.i.controller.UsuarioController - POST /api/usuarios - Usuario creado exitosamente con ID: 2
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing PUT /api/usuarios/2
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: PUT /api/usuarios/2
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:34:29 [http-nio-8080-exec-3] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/2
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured PUT /api/usuarios/2
2025-07-13 21:34:29 [http-nio-8080-exec-3] INFO  c.j.i.controller.UsuarioController - PUT /api/usuarios/2 - Actualizando usuario: UsuarioRequest{username='usuariotest', nombreCompleto='Usuario Test Actualizado', rolId=3, activo=true}
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG c.j.i.service.UsuarioService - Actualizando usuario con ID: 2
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre,
        u1_0.username 
    from
        usuarios u1_0 
    join
        roles r1_0 
            on r1_0.id=u1_0.rol_id 
    where
        u1_0.id=?
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        usuarios u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-07-13 21:34:29 [http-nio-8080-exec-3] INFO  c.j.i.service.UsuarioService - Usuario actualizado exitosamente: usuariotest
2025-07-13 21:34:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        email=?,
        nombre_completo=?,
        password=?,
        rol_id=?,
        username=? 
    where
        id=?
2025-07-13 21:34:30 [http-nio-8080-exec-3] INFO  c.j.i.controller.UsuarioController - PUT /api/usuarios/2 - Usuario actualizado exitosamente
2025-07-13 21:35:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing PUT /api/usuarios/2/cambiar-password?passwordActual=password123&passwordNuevo=newpassword123
2025-07-13 21:35:15 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: PUT /api/usuarios/2/cambiar-password
2025-07-13 21:35:15 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:35:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:35:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:35:15 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:35:15 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:35:15 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/2/cambiar-password
2025-07-13 21:35:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured PUT /api/usuarios/2/cambiar-password?passwordActual=password123&passwordNuevo=newpassword123
2025-07-13 21:35:15 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - PUT /api/usuarios/2/cambiar-password - Cambiando contrase√±a
2025-07-13 21:35:15 [http-nio-8080-exec-5] DEBUG c.j.i.service.UsuarioService - Cambiando contrase√±a para usuario ID: 2
2025-07-13 21:35:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre,
        u1_0.username 
    from
        usuarios u1_0 
    join
        roles r1_0 
            on r1_0.id=u1_0.rol_id 
    where
        u1_0.id=?
2025-07-13 21:35:16 [http-nio-8080-exec-5] INFO  c.j.i.service.UsuarioService - Contrase√±a cambiada exitosamente para usuario: usuariotest
2025-07-13 21:35:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        email=?,
        nombre_completo=?,
        password=?,
        rol_id=?,
        username=? 
    where
        id=?
2025-07-13 21:35:16 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - PUT /api/usuarios/2/cambiar-password - Contrase√±a cambiada exitosamente
2025-07-13 21:35:53 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing PUT /api/usuarios/2/cambiar-estado?activo=false
2025-07-13 21:35:53 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: PUT /api/usuarios/2/cambiar-estado
2025-07-13 21:35:53 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:35:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:35:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:35:53 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:35:53 [http-nio-8080-exec-6] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:35:53 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/2/cambiar-estado
2025-07-13 21:35:53 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured PUT /api/usuarios/2/cambiar-estado?activo=false
2025-07-13 21:35:53 [http-nio-8080-exec-6] INFO  c.j.i.controller.UsuarioController - PUT /api/usuarios/2/cambiar-estado?activo=false - Cambiando estado
2025-07-13 21:35:53 [http-nio-8080-exec-6] DEBUG c.j.i.service.UsuarioService - Cambiando estado de usuario ID: 2 a inactivo
2025-07-13 21:35:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre,
        u1_0.username 
    from
        usuarios u1_0 
    join
        roles r1_0 
            on r1_0.id=u1_0.rol_id 
    where
        u1_0.id=?
2025-07-13 21:35:53 [http-nio-8080-exec-6] INFO  c.j.i.service.UsuarioService - Estado cambiado exitosamente para usuario: usuariotest -> INACTIVO
2025-07-13 21:35:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        email=?,
        nombre_completo=?,
        password=?,
        rol_id=?,
        username=? 
    where
        id=?
2025-07-13 21:35:53 [http-nio-8080-exec-6] INFO  c.j.i.controller.UsuarioController - PUT /api/usuarios/2/cambiar-estado - Estado cambiado exitosamente a: false
2025-07-13 21:45:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 21:45:32 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 21:45:32 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:45:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:45:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:45:32 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:45:32 [http-nio-8080-exec-7] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:45:32 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 21:45:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 21:45:32 [http-nio-8080-exec-7] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 21:45:32 [http-nio-8080-exec-7] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 21:45:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 21:45:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 21:45:32 [http-nio-8080-exec-7] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 21:45:41 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/productos
2025-07-13 21:45:41 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/productos
2025-07-13 21:45:41 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:45:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:45:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:45:41 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:45:41 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:45:41 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/productos
2025-07-13 21:45:41 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/productos
2025-07-13 21:45:41 [http-nio-8080-exec-8] INFO  c.j.i.controller.ProductoController - GET /api/productos - Solicitando todos los productos
2025-07-13 21:45:41 [http-nio-8080-exec-8] DEBUG c.j.i.service.ProductoService - Obteniendo todos los productos
2025-07-13 21:45:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.categoria_id,
        p1_0.descripcion,
        p1_0.fecha_actualizacion,
        p1_0.fecha_creacion,
        p1_0.imagen,
        p1_0.nombre,
        p1_0.precio,
        p1_0.stock_actual,
        p1_0.stock_minimo 
    from
        productos p1_0
2025-07-13 21:45:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.descripcion,
        c1_0.fecha_creacion,
        c1_0.nombre 
    from
        categorias c1_0 
    where
        c1_0.id=?
2025-07-13 21:45:41 [http-nio-8080-exec-8] INFO  c.j.i.controller.ProductoController - GET /api/productos - Encontrados 3 productos
2025-07-13 21:50:46 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:50:46 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 21:50:46 [http-nio-8080-exec-1] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:50:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:50:46 [http-nio-8080-exec-1] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 2 usuarios
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:53:31 [http-nio-8080-exec-3] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 21:53:31 [http-nio-8080-exec-3] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:53:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:53:31 [http-nio-8080-exec-3] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 2 usuarios
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:53:35 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 21:53:35 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:53:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:53:35 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 2 usuarios
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:56:09 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 21:56:09 [http-nio-8080-exec-4] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:56:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:56:09 [http-nio-8080-exec-4] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 2 usuarios
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 21:57:11 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 21:57:11 [http-nio-8080-exec-8] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:57:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 21:57:11 [http-nio-8080-exec-8] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 2 usuarios
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:01:15 [http-nio-8080-exec-10] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 22:01:15 [http-nio-8080-exec-10] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:01:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:01:15 [http-nio-8080-exec-10] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 2 usuarios
2025-07-13 22:08:09 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=use
2025-07-13 22:08:09 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=use
2025-07-13 22:08:09 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:09 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:09 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:09 [http-nio-8080-exec-3] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:09 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:09 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=use
2025-07-13 22:08:09 [http-nio-8080-exec-3] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=use - Buscando usuario por username
2025-07-13 22:08:09 [http-nio-8080-exec-3] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: use
2025-07-13 22:08:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:09 [http-nio-8080-exec-3] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: use
2025-07-13 22:08:09 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=user
2025-07-13 22:08:09 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=user
2025-07-13 22:08:09 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:09 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:09 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:09 [http-nio-8080-exec-6] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:09 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:09 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=user
2025-07-13 22:08:09 [http-nio-8080-exec-6] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=user - Buscando usuario por username
2025-07-13 22:08:09 [http-nio-8080-exec-6] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: user
2025-07-13 22:08:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:09 [http-nio-8080-exec-6] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: user
2025-07-13 22:08:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=usern
2025-07-13 22:08:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=usern
2025-07-13 22:08:10 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:10 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:10 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:10 [http-nio-8080-exec-7] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:10 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=usern
2025-07-13 22:08:10 [http-nio-8080-exec-7] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=usern - Buscando usuario por username
2025-07-13 22:08:10 [http-nio-8080-exec-7] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: usern
2025-07-13 22:08:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:10 [http-nio-8080-exec-7] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: usern
2025-07-13 22:08:10 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=userna
2025-07-13 22:08:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=userna
2025-07-13 22:08:10 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:10 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:10 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:10 [http-nio-8080-exec-9] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:10 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=userna
2025-07-13 22:08:10 [http-nio-8080-exec-9] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=userna - Buscando usuario por username
2025-07-13 22:08:10 [http-nio-8080-exec-9] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: userna
2025-07-13 22:08:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:10 [http-nio-8080-exec-9] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: userna
2025-07-13 22:08:11 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=usernam
2025-07-13 22:08:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=usernam
2025-07-13 22:08:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:11 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=usernam
2025-07-13 22:08:11 [http-nio-8080-exec-1] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=usernam - Buscando usuario por username
2025-07-13 22:08:11 [http-nio-8080-exec-1] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: usernam
2025-07-13 22:08:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:11 [http-nio-8080-exec-1] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: usernam
2025-07-13 22:08:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=username
2025-07-13 22:08:11 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=username
2025-07-13 22:08:11 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:11 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:11 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:11 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:11 [http-nio-8080-exec-3] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:11 [http-nio-8080-exec-3] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:11 [http-nio-8080-exec-3] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:11 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=username
2025-07-13 22:08:11 [http-nio-8080-exec-3] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=username - Buscando usuario por username
2025-07-13 22:08:11 [http-nio-8080-exec-3] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: username
2025-07-13 22:08:11 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:11 [http-nio-8080-exec-3] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: username
2025-07-13 22:08:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=usernam
2025-07-13 22:08:13 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:13 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:13 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:13 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:13 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=usernam
2025-07-13 22:08:13 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=usernam - Buscando usuario por username
2025-07-13 22:08:13 [http-nio-8080-exec-5] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: usernam
2025-07-13 22:08:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:13 [http-nio-8080-exec-5] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: usernam
2025-07-13 22:08:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=emp
2025-07-13 22:08:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=emp
2025-07-13 22:08:13 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:13 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:13 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:13 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:13 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=emp
2025-07-13 22:08:13 [http-nio-8080-exec-4] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=emp - Buscando usuario por username
2025-07-13 22:08:13 [http-nio-8080-exec-4] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: emp
2025-07-13 22:08:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:13 [http-nio-8080-exec-4] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: emp
2025-07-13 22:08:14 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=empl
2025-07-13 22:08:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=empl
2025-07-13 22:08:14 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:14 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:14 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:14 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:14 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=empl
2025-07-13 22:08:14 [http-nio-8080-exec-8] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=empl - Buscando usuario por username
2025-07-13 22:08:14 [http-nio-8080-exec-8] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: empl
2025-07-13 22:08:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:14 [http-nio-8080-exec-8] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: empl
2025-07-13 22:08:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=emple
2025-07-13 22:08:14 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=emple
2025-07-13 22:08:14 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:14 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:14 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:14 [http-nio-8080-exec-10] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:14 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:14 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=emple
2025-07-13 22:08:14 [http-nio-8080-exec-10] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=emple - Buscando usuario por username
2025-07-13 22:08:14 [http-nio-8080-exec-10] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: emple
2025-07-13 22:08:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:14 [http-nio-8080-exec-10] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: emple
2025-07-13 22:08:14 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=emplea
2025-07-13 22:08:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=emplea
2025-07-13 22:08:14 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:14 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:14 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:14 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:14 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=emplea
2025-07-13 22:08:14 [http-nio-8080-exec-2] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=emplea - Buscando usuario por username
2025-07-13 22:08:14 [http-nio-8080-exec-2] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: emplea
2025-07-13 22:08:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:14 [http-nio-8080-exec-2] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: emplea
2025-07-13 22:08:14 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=emplead
2025-07-13 22:08:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=emplead
2025-07-13 22:08:14 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:14 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:14 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:14 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:14 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=emplead
2025-07-13 22:08:14 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=emplead - Buscando usuario por username
2025-07-13 22:08:14 [http-nio-8080-exec-5] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: emplead
2025-07-13 22:08:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:14 [http-nio-8080-exec-5] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: emplead
2025-07-13 22:08:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=empleado
2025-07-13 22:08:14 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=empleado
2025-07-13 22:08:14 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:14 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:14 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:14 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:14 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:14 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=empleado
2025-07-13 22:08:14 [http-nio-8080-exec-4] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=empleado - Buscando usuario por username
2025-07-13 22:08:14 [http-nio-8080-exec-4] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: empleado
2025-07-13 22:08:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:14 [http-nio-8080-exec-4] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: empleado
2025-07-13 22:08:15 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=empleado1
2025-07-13 22:08:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=empleado1
2025-07-13 22:08:15 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:15 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:15 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:15 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:15 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=empleado1
2025-07-13 22:08:15 [http-nio-8080-exec-8] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=empleado1 - Buscando usuario por username
2025-07-13 22:08:15 [http-nio-8080-exec-8] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: empleado1
2025-07-13 22:08:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:15 [http-nio-8080-exec-8] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: empleado1
2025-07-13 22:08:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=empleado
2025-07-13 22:08:16 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:08:16 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:08:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:08:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:08:16 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:08:16 [http-nio-8080-exec-9] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:08:16 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:08:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=empleado
2025-07-13 22:08:16 [http-nio-8080-exec-9] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=empleado - Buscando usuario por username
2025-07-13 22:08:16 [http-nio-8080-exec-9] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: empleado
2025-07-13 22:08:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:08:16 [http-nio-8080-exec-9] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: empleado
2025-07-13 22:09:34 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=ger
2025-07-13 22:09:34 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=ger
2025-07-13 22:09:34 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:34 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:34 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:34 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:34 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:34 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=ger
2025-07-13 22:09:34 [http-nio-8080-exec-2] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=ger - Buscando usuario por username
2025-07-13 22:09:34 [http-nio-8080-exec-2] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: ger
2025-07-13 22:09:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:34 [http-nio-8080-exec-2] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: ger
2025-07-13 22:09:34 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gere
2025-07-13 22:09:34 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gere
2025-07-13 22:09:34 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:34 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:34 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:34 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:34 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:34 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gere
2025-07-13 22:09:34 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gere - Buscando usuario por username
2025-07-13 22:09:34 [http-nio-8080-exec-5] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gere
2025-07-13 22:09:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:34 [http-nio-8080-exec-5] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gere
2025-07-13 22:09:35 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=geren
2025-07-13 22:09:35 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=geren
2025-07-13 22:09:35 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:35 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:35 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:35 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:35 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:35 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=geren
2025-07-13 22:09:35 [http-nio-8080-exec-4] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=geren - Buscando usuario por username
2025-07-13 22:09:35 [http-nio-8080-exec-4] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: geren
2025-07-13 22:09:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:35 [http-nio-8080-exec-4] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: geren
2025-07-13 22:09:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerent
2025-07-13 22:09:35 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerent
2025-07-13 22:09:35 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:35 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:35 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:35 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:35 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:35 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerent
2025-07-13 22:09:35 [http-nio-8080-exec-8] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerent - Buscando usuario por username
2025-07-13 22:09:35 [http-nio-8080-exec-8] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerent
2025-07-13 22:09:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:35 [http-nio-8080-exec-8] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerent
2025-07-13 22:09:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerente
2025-07-13 22:09:35 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerente
2025-07-13 22:09:35 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:35 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:35 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:35 [http-nio-8080-exec-10] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:35 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:35 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerente
2025-07-13 22:09:35 [http-nio-8080-exec-10] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerente - Buscando usuario por username
2025-07-13 22:09:35 [http-nio-8080-exec-10] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerente
2025-07-13 22:09:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:35 [http-nio-8080-exec-10] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerente
2025-07-13 22:09:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerenteS
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteS
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:36 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteS
2025-07-13 22:09:36 [http-nio-8080-exec-2] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteS - Buscando usuario por username
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteS
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:36 [http-nio-8080-exec-2] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteS
2025-07-13 22:09:36 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerenteSa
2025-07-13 22:09:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteSa
2025-07-13 22:09:36 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:36 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:36 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:36 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteSa
2025-07-13 22:09:36 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteSa - Buscando usuario por username
2025-07-13 22:09:36 [http-nio-8080-exec-5] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteSa
2025-07-13 22:09:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:36 [http-nio-8080-exec-5] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteSa
2025-07-13 22:09:36 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerenteSan
2025-07-13 22:09:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteSan
2025-07-13 22:09:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:36 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:36 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteSan
2025-07-13 22:09:36 [http-nio-8080-exec-4] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteSan - Buscando usuario por username
2025-07-13 22:09:36 [http-nio-8080-exec-4] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteSan
2025-07-13 22:09:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:36 [http-nio-8080-exec-4] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteSan
2025-07-13 22:09:36 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerenteSant
2025-07-13 22:09:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteSant
2025-07-13 22:09:36 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:36 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:36 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:36 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteSant
2025-07-13 22:09:36 [http-nio-8080-exec-8] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteSant - Buscando usuario por username
2025-07-13 22:09:36 [http-nio-8080-exec-8] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteSant
2025-07-13 22:09:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:36 [http-nio-8080-exec-8] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteSant
2025-07-13 22:09:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerenteSanti
2025-07-13 22:09:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteSanti
2025-07-13 22:09:36 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:36 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:36 [http-nio-8080-exec-10] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:36 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteSanti
2025-07-13 22:09:36 [http-nio-8080-exec-10] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteSanti - Buscando usuario por username
2025-07-13 22:09:36 [http-nio-8080-exec-10] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteSanti
2025-07-13 22:09:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:36 [http-nio-8080-exec-10] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteSanti
2025-07-13 22:09:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerenteSantia
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteSantia
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:36 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteSantia
2025-07-13 22:09:36 [http-nio-8080-exec-2] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteSantia - Buscando usuario por username
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteSantia
2025-07-13 22:09:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:36 [http-nio-8080-exec-2] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteSantia
2025-07-13 22:09:37 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerenteSantiaf
2025-07-13 22:09:37 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteSantiaf
2025-07-13 22:09:37 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:37 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:37 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:37 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:37 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:37 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteSantiaf
2025-07-13 22:09:37 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteSantiaf - Buscando usuario por username
2025-07-13 22:09:37 [http-nio-8080-exec-5] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteSantiaf
2025-07-13 22:09:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:37 [http-nio-8080-exec-5] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteSantiaf
2025-07-13 22:09:37 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerenteSantiafo
2025-07-13 22:09:37 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteSantiafo
2025-07-13 22:09:37 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:37 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:37 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:37 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:37 [http-nio-8080-exec-4] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:37 [http-nio-8080-exec-4] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:37 [http-nio-8080-exec-4] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:37 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteSantiafo
2025-07-13 22:09:37 [http-nio-8080-exec-4] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteSantiafo - Buscando usuario por username
2025-07-13 22:09:37 [http-nio-8080-exec-4] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteSantiafo
2025-07-13 22:09:37 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:37 [http-nio-8080-exec-4] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteSantiafo
2025-07-13 22:09:38 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteSantiaf
2025-07-13 22:09:39 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:39 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:39 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:39 [http-nio-8080-exec-7] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:39 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:39 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteSantiaf
2025-07-13 22:09:39 [http-nio-8080-exec-7] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteSantiaf - Buscando usuario por username
2025-07-13 22:09:39 [http-nio-8080-exec-7] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteSantiaf
2025-07-13 22:09:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:39 [http-nio-8080-exec-7] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteSantiaf
2025-07-13 22:09:39 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteSantia
2025-07-13 22:09:39 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:39 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:39 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:39 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:39 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:39 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteSantia
2025-07-13 22:09:39 [http-nio-8080-exec-8] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteSantia - Buscando usuario por username
2025-07-13 22:09:39 [http-nio-8080-exec-8] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteSantia
2025-07-13 22:09:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:39 [http-nio-8080-exec-8] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteSantia
2025-07-13 22:09:39 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerenteSantiag
2025-07-13 22:09:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteSantiag
2025-07-13 22:09:39 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:39 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:39 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:39 [http-nio-8080-exec-10] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:39 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteSantiag
2025-07-13 22:09:39 [http-nio-8080-exec-10] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteSantiag - Buscando usuario por username
2025-07-13 22:09:39 [http-nio-8080-exec-10] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteSantiag
2025-07-13 22:09:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:39 [http-nio-8080-exec-10] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteSantiag
2025-07-13 22:09:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/buscar?username=gerenteSantiago
2025-07-13 22:09:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/buscar?username=gerenteSantiago
2025-07-13 22:09:40 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/buscar
2025-07-13 22:09:40 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:09:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:09:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:09:40 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:09:40 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:09:40 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/buscar
2025-07-13 22:09:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/buscar?username=gerenteSantiago
2025-07-13 22:09:40 [http-nio-8080-exec-2] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar?username=gerenteSantiago - Buscando usuario por username
2025-07-13 22:09:40 [http-nio-8080-exec-2] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por username: gerenteSantiago
2025-07-13 22:09:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=?
2025-07-13 22:09:40 [http-nio-8080-exec-2] WARN  c.j.i.controller.UsuarioController - GET /api/usuarios/buscar - Usuario no encontrado con username: gerenteSantiago
2025-07-13 22:10:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios?password=admin123
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /api/usuarios?password=admin123
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: POST /api/usuarios
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:10:13 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /api/usuarios?password=admin123
2025-07-13 22:10:13 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - POST /api/usuarios - Creando nuevo usuario: UsuarioRequest{username='gerenteSantiago', nombreCompleto='Santiago Cruz', rolId=3, activo=true}
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG c.j.i.service.UsuarioService - Creando nuevo usuario: gerentesantiago
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        usuarios u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG c.j.inventario.service.RolService - Obteniendo rol por ID: 3
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:10:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        usuarios
        (activo, email, fecha_creacion, nombre_completo, password, rol_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-07-13 22:10:13 [http-nio-8080-exec-5] INFO  c.j.i.service.UsuarioService - Usuario creado exitosamente con ID: 3 y username: gerentesantiago
2025-07-13 22:10:13 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - POST /api/usuarios - Usuario creado exitosamente con ID: 3
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:10:13 [http-nio-8080-exec-6] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 22:10:13 [http-nio-8080-exec-6] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:10:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:10:13 [http-nio-8080-exec-6] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 3 usuarios
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:15:36 [http-nio-8080-exec-7] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 22:15:36 [http-nio-8080-exec-7] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:15:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:15:36 [http-nio-8080-exec-7] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 3 usuarios
2025-07-13 22:21:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/2
2025-07-13 22:21:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/2
2025-07-13 22:21:51 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/2
2025-07-13 22:21:51 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:21:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:21:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:21:51 [http-nio-8080-exec-10] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:21:51 [http-nio-8080-exec-10] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:21:51 [http-nio-8080-exec-10] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/2
2025-07-13 22:21:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/2
2025-07-13 22:21:51 [http-nio-8080-exec-10] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/2 - Solicitando usuario por ID
2025-07-13 22:21:51 [http-nio-8080-exec-10] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por ID: 2
2025-07-13 22:21:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre,
        u1_0.username 
    from
        usuarios u1_0 
    join
        roles r1_0 
            on r1_0.id=u1_0.rol_id 
    where
        u1_0.id=?
2025-07-13 22:21:51 [http-nio-8080-exec-10] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/2 - Usuario encontrado: usuariotest
2025-07-13 22:22:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing PUT /api/usuarios/2
2025-07-13 22:22:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: PUT /api/usuarios/2
2025-07-13 22:22:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:22:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:22:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:22:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:22:11 [http-nio-8080-exec-1] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:22:11 [http-nio-8080-exec-1] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/2
2025-07-13 22:22:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured PUT /api/usuarios/2
2025-07-13 22:22:11 [http-nio-8080-exec-1] INFO  c.j.i.controller.UsuarioController - PUT /api/usuarios/2 - Actualizando usuario: UsuarioRequest{username='usuariotest', nombreCompleto='Usuario Test', rolId=3, activo=true}
2025-07-13 22:22:11 [http-nio-8080-exec-1] DEBUG c.j.i.service.UsuarioService - Actualizando usuario con ID: 2
2025-07-13 22:22:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre,
        u1_0.username 
    from
        usuarios u1_0 
    join
        roles r1_0 
            on r1_0.id=u1_0.rol_id 
    where
        u1_0.id=?
2025-07-13 22:22:11 [http-nio-8080-exec-1] INFO  c.j.i.service.UsuarioService - Usuario actualizado exitosamente: usuariotest
2025-07-13 22:22:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        email=?,
        nombre_completo=?,
        password=?,
        rol_id=?,
        username=? 
    where
        id=?
2025-07-13 22:22:11 [http-nio-8080-exec-1] INFO  c.j.i.controller.UsuarioController - PUT /api/usuarios/2 - Usuario actualizado exitosamente
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:22:11 [http-nio-8080-exec-2] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 22:22:11 [http-nio-8080-exec-2] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:22:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:22:11 [http-nio-8080-exec-2] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 3 usuarios
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:26:40 [http-nio-8080-exec-5] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 22:26:40 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:26:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:26:40 [http-nio-8080-exec-5] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 3 usuarios
2025-07-13 22:27:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /api/usuarios/3
2025-07-13 22:27:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios/3
2025-07-13 22:27:55 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios/3
2025-07-13 22:27:55 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:27:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:27:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:27:55 [http-nio-8080-exec-7] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:27:55 [http-nio-8080-exec-7] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:27:55 [http-nio-8080-exec-7] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/3
2025-07-13 22:27:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios/3
2025-07-13 22:27:55 [http-nio-8080-exec-7] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/3 - Solicitando usuario por ID
2025-07-13 22:27:55 [http-nio-8080-exec-7] DEBUG c.j.i.service.UsuarioService - Obteniendo usuario por ID: 3
2025-07-13 22:27:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre,
        u1_0.username 
    from
        usuarios u1_0 
    join
        roles r1_0 
            on r1_0.id=u1_0.rol_id 
    where
        u1_0.id=?
2025-07-13 22:27:55 [http-nio-8080-exec-7] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios/3 - Usuario encontrado: gerentesantiago
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing PUT /api/usuarios/3
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: PUT /api/usuarios/3
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:28:02 [http-nio-8080-exec-8] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios/3
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured PUT /api/usuarios/3
2025-07-13 22:28:02 [http-nio-8080-exec-8] INFO  c.j.i.controller.UsuarioController - PUT /api/usuarios/3 - Actualizando usuario: UsuarioRequest{username='gerentesantiago', nombreCompleto='Santiago Cruz', rolId=2, activo=true}
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG c.j.i.service.UsuarioService - Actualizando usuario con ID: 3
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre,
        u1_0.username 
    from
        usuarios u1_0 
    join
        roles r1_0 
            on r1_0.id=u1_0.rol_id 
    where
        u1_0.id=?
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG c.j.inventario.service.RolService - Obteniendo rol por ID: 2
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:28:02 [http-nio-8080-exec-8] INFO  c.j.i.service.UsuarioService - Usuario actualizado exitosamente: gerentesantiago
2025-07-13 22:28:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        usuarios 
    set
        activo=?,
        email=?,
        nombre_completo=?,
        password=?,
        rol_id=?,
        username=? 
    where
        id=?
2025-07-13 22:28:02 [http-nio-8080-exec-8] INFO  c.j.i.controller.UsuarioController - PUT /api/usuarios/3 - Usuario actualizado exitosamente
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /api/usuarios
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Procesando request: GET /api/usuarios
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Cargando usuario por username: admin
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0 
    where
        u1_0.username=? 
        and u1_0.activo
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG c.j.i.s.UserDetailsServiceImpl - Autoridades creadas para usuario admin: [ROLE_ADMIN, ADMIN, READ, WRITE, DELETE, ADMIN, REPORTS, USERS, INVENTORY]
2025-07-13 22:28:03 [http-nio-8080-exec-9] INFO  c.j.i.s.UserDetailsServiceImpl - Usuario cargado exitosamente: admin con rol: ADMIN
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG c.j.i.s.JwtAuthenticationFilter - Usuario autenticado exitosamente: admin para request: /api/usuarios
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /api/usuarios
2025-07-13 22:28:03 [http-nio-8080-exec-9] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Solicitando todos los usuarios
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG c.j.i.service.UsuarioService - Obteniendo todos los usuarios
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.activo,
        u1_0.email,
        u1_0.fecha_creacion,
        u1_0.nombre_completo,
        u1_0.password,
        u1_0.rol_id,
        u1_0.username 
    from
        usuarios u1_0
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:28:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.descripcion,
        r1_0.fecha_creacion,
        r1_0.nombre 
    from
        roles r1_0 
    where
        r1_0.id=?
2025-07-13 22:28:03 [http-nio-8080-exec-9] INFO  c.j.i.controller.UsuarioController - GET /api/usuarios - Encontrados 3 usuarios
